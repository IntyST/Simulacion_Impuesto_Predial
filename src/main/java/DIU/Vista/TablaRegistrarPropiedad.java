/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package DIU.Vista;

import DIU.Controlador.DatosPredialesControlador;
import DIU.Controlador.PersonaControlador;
import DIU.Modelo.ConsultaPagosModelo;
import DIU.Modelo.DatosPredialesModelo;
import DIU.Modelo.PersonaModelo;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.Period;

/**
 *
 * @author Usuario
 */
public class TablaRegistrarPropiedad extends javax.swing.JInternalFrame {

    /**
     * Creates new form TablaRegistrarPropiedad
     */
    ArrayList<PersonaModelo> listaPersonaModelo = new ArrayList<>();
    ArrayList<DatosPredialesModelo> listaDatosPredialesModelo = new ArrayList<>();
    DefaultTableModel modelo = new DefaultTableModel();

    public TablaRegistrarPropiedad() {
        initComponents();
        setModelo();
    }

    public void setModelo() {
        String[] cabecera = {"Nro.", "Cédula", "Nombres", "Apellidos",
            "Código castral", "Tipo propiedad", "Dirección", "Área total", "Área construcción",
            "Valor de terreno", "Valor de edificación", "Valor comercial"};
        modelo.setColumnIdentifiers(cabecera);
        tblDatos.setModel(modelo);
    }

    private void setDatos() {
        // ESTRUCTURA INFORMACIÓN TABLA
        int contador = 1;
        for (int i = 0; i < Math.max(listaPersonaModelo.size(), listaDatosPredialesModelo.size()); i++) {
            Object[] datosFilaPersonaYDatosPrediales = new Object[modelo.getColumnCount()];
            if (i < listaPersonaModelo.size()) {
                PersonaModelo persona = listaPersonaModelo.get(i);
                datosFilaPersonaYDatosPrediales[0] = contador;
                datosFilaPersonaYDatosPrediales[1] = persona.getCedula();
                datosFilaPersonaYDatosPrediales[2] = persona.getNombres();
                datosFilaPersonaYDatosPrediales[3] = persona.getApellidos();
            }
            if (i < listaDatosPredialesModelo.size()) {
                DatosPredialesModelo datosPrediales = listaDatosPredialesModelo.get(i);
                datosFilaPersonaYDatosPrediales[4] = datosPrediales.getCodCastralPred();
                datosFilaPersonaYDatosPrediales[5] = datosPrediales.getTipoPred();
                datosFilaPersonaYDatosPrediales[6] = datosPrediales.getDireccionPropie();
                datosFilaPersonaYDatosPrediales[7] = datosPrediales.getAreaTotalPred();
                datosFilaPersonaYDatosPrediales[8] = datosPrediales.getAreaConstruccionPred();
                datosFilaPersonaYDatosPrediales[9] = datosPrediales.getValorTerrenoPred();
                datosFilaPersonaYDatosPrediales[10] = datosPrediales.getValorEdificacionPred();
                datosFilaPersonaYDatosPrediales[11] = datosPrediales.getValorComercialPred();
            }
            modelo.addRow(datosFilaPersonaYDatosPrediales);
            contador++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbtGrupo = new javax.swing.ButtonGroup();
        pnlPersona = new javax.swing.JPanel();
        lblNombres = new javax.swing.JLabel();
        lblApellidos = new javax.swing.JLabel();
        lblCedula = new javax.swing.JLabel();
        lblEdad = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblCorreo = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        lblNombresRes = new javax.swing.JLabel();
        lblCorreoRes = new javax.swing.JLabel();
        lblApellidosRes = new javax.swing.JLabel();
        lblEdadRes = new javax.swing.JLabel();
        lblTelefonoRes = new javax.swing.JLabel();
        pnlPropiedad = new javax.swing.JPanel();
        lblCodCastral = new javax.swing.JLabel();
        txtCodCastral = new javax.swing.JTextField();
        lblTipoPro = new javax.swing.JLabel();
        rbtUrbano = new javax.swing.JRadioButton();
        rbtRural = new javax.swing.JRadioButton();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        lblAreatotal = new javax.swing.JLabel();
        txtAreaTotal = new javax.swing.JTextField();
        lblAreaConstruccion = new javax.swing.JLabel();
        txtAreaConstruccion = new javax.swing.JTextField();
        lblValorEdificacion = new javax.swing.JLabel();
        txtValorEdificacion = new javax.swing.JTextField();
        lblValorTerreno = new javax.swing.JLabel();
        txtValorTerreno = new javax.swing.JTextField();
        Guardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        lblEscudoIbarra = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        jScrollBar1 = new javax.swing.JScrollBar();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        pnlPersona.setBorder(javax.swing.BorderFactory.createTitledBorder("INGRESE LA CÉDULA DE LA PERSONA"));

        lblNombres.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblNombres.setText("Nombres:");

        lblApellidos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblApellidos.setForeground(new java.awt.Color(0, 0, 0));
        lblApellidos.setText("Apellidos:");

        lblCedula.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblCedula.setText("Cédula:");

        lblEdad.setText("Edad:");

        lblTelefono.setText("Télefono:");

        lblCorreo.setText("Correo electrónico:");

        txtCedula.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCedulaKeyPressed(evt);
            }
        });

        lblNombresRes.setBackground(new java.awt.Color(153, 153, 153));
        lblNombresRes.setForeground(new java.awt.Color(0, 0, 0));
        lblNombresRes.setOpaque(true);

        lblCorreoRes.setBackground(new java.awt.Color(153, 153, 153));
        lblCorreoRes.setForeground(new java.awt.Color(0, 0, 0));
        lblCorreoRes.setOpaque(true);

        lblApellidosRes.setBackground(new java.awt.Color(153, 153, 153));
        lblApellidosRes.setForeground(new java.awt.Color(0, 0, 0));
        lblApellidosRes.setOpaque(true);

        lblEdadRes.setBackground(new java.awt.Color(153, 153, 153));
        lblEdadRes.setForeground(new java.awt.Color(0, 0, 0));
        lblEdadRes.setOpaque(true);

        lblTelefonoRes.setBackground(new java.awt.Color(153, 153, 153));
        lblTelefonoRes.setForeground(new java.awt.Color(0, 0, 0));
        lblTelefonoRes.setOpaque(true);

        javax.swing.GroupLayout pnlPersonaLayout = new javax.swing.GroupLayout(pnlPersona);
        pnlPersona.setLayout(pnlPersonaLayout);
        pnlPersonaLayout.setHorizontalGroup(
            pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPersonaLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombres)
                    .addComponent(lblCedula)
                    .addComponent(lblApellidos))
                .addGap(32, 32, 32)
                .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNombresRes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblApellidosRes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCedula, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTelefono)
                    .addComponent(lblCorreo)
                    .addComponent(lblEdad))
                .addGap(18, 18, 18)
                .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCorreoRes, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefonoRes, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEdadRes, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(208, 208, 208))
        );
        pnlPersonaLayout.setVerticalGroup(
            pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPersonaLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlPersonaLayout.createSequentialGroup()
                        .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPersonaLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblNombresRes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPersonaLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTelefono))))
                    .addGroup(pnlPersonaLayout.createSequentialGroup()
                        .addComponent(lblCedula)
                        .addGap(39, 39, 39)
                        .addComponent(lblNombres))
                    .addGroup(pnlPersonaLayout.createSequentialGroup()
                        .addComponent(lblCorreoRes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTelefonoRes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPersonaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblEdadRes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblEdad))
                            .addGroup(pnlPersonaLayout.createSequentialGroup()
                                .addComponent(lblApellidosRes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))
                        .addGap(40, 40, 40))
                    .addGroup(pnlPersonaLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblApellidos)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pnlPropiedad.setBorder(javax.swing.BorderFactory.createTitledBorder("INGRESE LOS SIGUIENTES CAMPOS DE LA PROPIEDAD"));

        lblCodCastral.setText("Codigo castral:");

        lblTipoPro.setText("Tipo de propiedad:");

        rbtUrbano.setText("Urbano");

        rbtRural.setText("Rural");

        lblDireccion.setText("Dirección de propiedad:");

        lblAreatotal.setText("Área total:");

        lblAreaConstruccion.setText("Área de construcción:");

        lblValorEdificacion.setText("Valor de edificación: ");

        lblValorTerreno.setText("Valor de terreno: ");

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPropiedadLayout = new javax.swing.GroupLayout(pnlPropiedad);
        pnlPropiedad.setLayout(pnlPropiedadLayout);
        pnlPropiedadLayout.setHorizontalGroup(
            pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTipoPro))
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblDireccion))
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblCodCastral)))
                .addGap(41, 41, 41)
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodCastral, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtUrbano)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtRural))
                .addGap(178, 178, 178)
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAreatotal)
                    .addComponent(lblAreaConstruccion)
                    .addComponent(lblValorEdificacion)
                    .addComponent(lblValorTerreno))
                .addGap(34, 34, 34)
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAreaConstruccion, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAreaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPropiedadLayout.createSequentialGroup()
                        .addComponent(txtValorEdificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPropiedadLayout.createSequentialGroup()
                        .addComponent(txtValorTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51))
        );
        pnlPropiedadLayout.setVerticalGroup(
            pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodCastral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAreatotal)
                    .addComponent(txtAreaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodCastral)
                    .addComponent(Guardar))
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtUrbano)
                            .addComponent(lblAreaConstruccion)
                            .addComponent(btnLimpiar)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPropiedadLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAreaConstruccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblTipoPro))
                            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rbtRural)
                                    .addComponent(txtValorEdificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDireccion)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76))
                    .addGroup(pnlPropiedadLayout.createSequentialGroup()
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar))
                            .addGroup(pnlPropiedadLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblValorTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlPropiedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnActualizar)
                            .addComponent(txtValorTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValorEdificacion))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        lblEscudoIbarra.setIcon(new javax.swing.ImageIcon("C:\\Users\\Usuario\\OneDrive\\Documentos\\NetBeansProjects\\SimuladorImpuestoPredial\\src\\main\\resources\\Imgs\\Escudo_de_Ibarra_(Ecuador).jpg")); // NOI18N

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlPropiedad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlPersona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(55, 55, 55)
                        .addComponent(lblEscudoIbarra))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1428, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(pnlPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblEscudoIbarra)))
                .addGap(18, 18, 18)
                .addComponent(pnlPropiedad, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // Obtener la cédula ingresada por el usuario
        String cedula = txtCedula.getText();

        // Verificar si la cédula está vacía
        if (cedula.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese la cédula.");
            return; // Salir del método si la cédula está vacía
        }

        // Obtener los demás datos ingresados por el usuario
        String codCastral = txtCodCastral.getText();
        String tipoPred = "";

        // Verificar qué opción ha sido seleccionada
        if (rbtUrbano.isSelected()) {
            tipoPred = "Urbano";
        } else if (rbtRural.isSelected()) {
            tipoPred = "Rural";
        } else {
            // Si ninguna opción ha sido seleccionada, mostrar un mensaje de error y salir del método
            JOptionPane.showMessageDialog(null, "Por favor, seleccione el tipo de propiedad.");
            return;
        }

        String direccion = txtDireccion.getText();
        double areaTotal = Double.parseDouble(txtAreaTotal.getText());
        double areaConstruccion = Double.parseDouble(txtAreaConstruccion.getText());
        double valorTerreno = Double.parseDouble(txtValorTerreno.getText());
        double valorEdificacion = Double.parseDouble(txtValorEdificacion.getText());

        // Calcular el subtotal del pago
        double subTotalPago;
        if (tipoPred.equals("Urbano")) {
            subTotalPago = (valorTerreno + valorEdificacion) * 1.10 / 1000;
        } else { // Rural
            subTotalPago = (valorTerreno + valorEdificacion) * 0.95 / 1000;
        }

        // Crear una instancia del controlador de datos prediales
        DatosPredialesControlador datosPredialesControlador = new DatosPredialesControlador();

        DatosPredialesModelo datosPrediales = new DatosPredialesModelo(codCastral, tipoPred,
                direccion, areaTotal, areaConstruccion, valorTerreno, valorEdificacion);

        // Crear fechas de ingreso y vencimiento
        java.sql.Date fechaIngreso = java.sql.Date.valueOf("2024-01-01");
        java.sql.Date fechaVencimiento = java.sql.Date.valueOf("2024-12-31");

        // Crear un objeto ConsultaPagosModelo y establecer sus propiedades
        ConsultaPagosModelo consultaPagos = new ConsultaPagosModelo();
        consultaPagos.setFecha_ingreso_pago(fechaIngreso);
        consultaPagos.setFecha_vencimiento_pago(fechaVencimiento);
        consultaPagos.setDescripcion_pago("Pago de impuestos predial anual " + tipoPred);
        consultaPagos.setSub_total_pago(subTotalPago);

        // Llamar al método para crear los datos prediales y pagos
        datosPredialesControlador.crearDatosPredialesYPagos(cedula, datosPrediales, consultaPagos);

        setDatos();
        limpiarTabla();
        cargarTabla();

    }//GEN-LAST:event_GuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarEntradas();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String codigoCastral = txtCodCastral.getText();
        DatosPredialesControlador pC = new DatosPredialesControlador();
        pC.eliminarDatosPrediales(codigoCastral);
        limpiarTabla();
        cargarTabla();
        limpiarEntradas();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // Obtener la cédula ingresada por el usuario
        String cedula = txtCedula.getText();

        // Verificar si la cédula está vacía
        if (cedula.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese la cédula.");
            return; // Salir del método si la cédula está vacía
        }

        // Obtener los demás datos ingresados por el usuario
        String codCastral = txtCodCastral.getText();
        String tipoPred = "";

        // Verificar qué opción ha sido seleccionada
        if (rbtUrbano.isSelected()) {
            tipoPred = "Urbano";
        } else if (rbtRural.isSelected()) {
            tipoPred = "Rural";
        } else {
            // Si ninguna opción ha sido seleccionada, mostrar un mensaje de error y salir del método
            JOptionPane.showMessageDialog(null, "Por favor, seleccione el tipo de propiedad.");
            return;
        }

        String direccion = txtDireccion.getText();
        double areaTotal = Double.parseDouble(txtAreaTotal.getText());
        double areaConstruccion = Double.parseDouble(txtAreaConstruccion.getText());
        double valorTerreno = Double.parseDouble(txtValorTerreno.getText());
        double valorEdificacion = Double.parseDouble(txtValorEdificacion.getText());

        // Calcular el subtotal del pago
        double subTotalPago;
        if (tipoPred.equals("Urbano")) {
            subTotalPago = (valorTerreno + valorEdificacion) * 1.10 / 1000;
        } else { // Rural
            subTotalPago = (valorTerreno + valorEdificacion) * 0.95 / 1000;
        }

        // Crear una instancia del controlador de datos prediales
        DatosPredialesControlador datosPredialesControlador = new DatosPredialesControlador();

        // Crear una instancia del modelo de datos prediales
        DatosPredialesModelo datosPrediales = new DatosPredialesModelo(codCastral, tipoPred,
                direccion, areaTotal, areaConstruccion, valorTerreno, valorEdificacion);

        // Crear fechas de ingreso y vencimiento
        java.sql.Date fechaIngreso = java.sql.Date.valueOf("2024-01-01");
        java.sql.Date fechaVencimiento = java.sql.Date.valueOf("2024-12-31");

        // Crear un objeto ConsultaPagosModelo y establecer sus propiedades
        ConsultaPagosModelo consultaPagos = new ConsultaPagosModelo();
        consultaPagos.setFecha_ingreso_pago(fechaIngreso);
        consultaPagos.setFecha_vencimiento_pago(fechaVencimiento);
        consultaPagos.setDescripcion_pago("Pago de impuestos predial anual " + tipoPred);
        consultaPagos.setSub_total_pago(subTotalPago);

        // Llamar al método para actualizar los datos prediales y pagos
        datosPredialesControlador.actualizarDatosPredialesYPagos(cedula, datosPrediales, consultaPagos);

        // Limpiar la tabla y cargar los nuevos datos
        limpiarTabla();
        cargarTabla();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        limpiarTabla();
        cargarTabla();
        rbtGrupo.add(rbtUrbano);
        rbtGrupo.add(rbtRural);
    }//GEN-LAST:event_formInternalFrameActivated

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String cedula = txtCedula.getText();
        DatosPredialesControlador pC = new DatosPredialesControlador();
        ArrayList<Object[]> listaFilas = pC.buscarPropiedadesPorCedula(cedula);

        // Verificar si se encontraron propiedades asociadas a la cédula ingresada
        if (listaFilas != null && !listaFilas.isEmpty()) {
            // Si se encontraron propiedades, agregarlas a la tabla
            this.limpiarTabla();
            for (Object[] listaFila : listaFilas) {
                modelo.addRow(listaFila);
            }
            tblDatos.setModel(modelo);
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron propiedades asociadas a esta cédula.");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
        DefaultTableModel dtm = (DefaultTableModel) tblDatos.getModel();
        int filaSeleccionada = tblDatos.getSelectedRow();
        if (filaSeleccionada != -1) { // Verifica si se ha seleccionado una fila válida
            // Obtener los datos de la fila seleccionada y establecerlos en los campos correspondientes
            txtCedula.setText((String) dtm.getValueAt(filaSeleccionada, 1));
            lblNombresRes.setText((String) dtm.getValueAt(filaSeleccionada, 2));
            lblApellidosRes.setText((String) dtm.getValueAt(filaSeleccionada, 3));
            // Asegúrate de verificar que los datos no sean null antes de convertirlos a String
            if (dtm.getValueAt(filaSeleccionada, 4) != null) {
                txtCodCastral.setText(dtm.getValueAt(filaSeleccionada, 4).toString());
            }
            // Verificar el tipo de propiedad y seleccionar el botón de radio correspondiente
            String tipoPropiedad = (String) dtm.getValueAt(filaSeleccionada, 5);
            if (tipoPropiedad.equalsIgnoreCase("Urbano")) {
                rbtUrbano.setSelected(true);
                rbtRural.setSelected(false);
            } else if (tipoPropiedad.equalsIgnoreCase("Rural")) {
                rbtUrbano.setSelected(false);
                rbtRural.setSelected(true);
            }
            txtDireccion.setText((String) dtm.getValueAt(filaSeleccionada, 6));
            txtAreaTotal.setText(dtm.getValueAt(filaSeleccionada, 7).toString());
            txtAreaConstruccion.setText(dtm.getValueAt(filaSeleccionada, 8).toString());
            txtValorTerreno.setText(dtm.getValueAt(filaSeleccionada, 9).toString());
            txtValorEdificacion.setText(dtm.getValueAt(filaSeleccionada, 10).toString());
        }
    }//GEN-LAST:event_tblDatosMouseClicked

    private void txtCedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCedulaKeyPressed
        // Obtener la cédula ingresada por el usuario
        String cedula = txtCedula.getText();

        // Verificar si la cédula tiene una longitud válida
        if (cedula.length() == 10) {
            // Crear una instancia del controlador de persona
            PersonaControlador personaControlador = new PersonaControlador();

            // Llamar al método para recuperar los datos de la persona
            PersonaModelo persona = personaControlador.recuperarDatosPersona(cedula);

            // Verificar si se encontraron datos para la cédula ingresada
            if (persona != null) {
                // Mostrar los datos de la persona en los campos correspondientes
                lblNombresRes.setText(persona.getNombres());
                lblApellidosRes.setText(persona.getApellidos());
                lblCorreoRes.setText(persona.getCorreo());
                lblTelefonoRes.setText(persona.getTelefono());

                // Calcular la edad actual en base a la fecha de nacimiento
                java.util.Date fechaNacimientoUtil = persona.getFechaNacimiento();
                java.sql.Date fechaNacimientoSQL = new java.sql.Date(fechaNacimientoUtil.getTime());
                LocalDate fechaNacimiento = fechaNacimientoSQL.toLocalDate();
                LocalDate fechaActual = LocalDate.now();
                int edad = Period.between(fechaNacimiento, fechaActual).getYears();

                // Mostrar la edad en el JLabel correspondiente
                lblEdadRes.setText(Integer.toString(edad));
            } else {
                // Limpiar los campos si no se encontraron datos para la cédula ingresada
                lblNombresRes.setText("");
                lblApellidosRes.setText("");
                lblCorreoRes.setText("");
                lblTelefonoRes.setText("");
                lblEdadRes.setText("");
                JOptionPane.showMessageDialog(null, "No se encontraron datos para la cédula ingresada.");
            }
        }
    }//GEN-LAST:event_txtCedulaKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        limpiarTabla();
        cargarTabla();
    }//GEN-LAST:event_formMouseClicked

    private void cargarTabla() {
        DatosPredialesControlador pC = new DatosPredialesControlador();
        ArrayList<Object[]> lista = pC.obtenerDatosPrediales();

        for (Object[] filas : lista) {
            modelo.addRow(filas);
        }

        tblDatos.setModel(modelo);
    }

    private void limpiarTabla() {
        int a = modelo.getRowCount() - 1;  // Índices van de 0 a n-1
        // System.out.println("Tabla " + a);   // Para mostrar por consola el resultado
        for (int i = a; i >= 0; i--) {
            // System.out.println("i " + i);    // Para mostrar por consola el resultado
            modelo.removeRow(i);
        }
    }

    public void limpiarEntradas() {
        // Limpiar todos los campos
        txtCedula.setText("");
        txtCodCastral.setText("");
        txtDireccion.setText("");
        txtAreaTotal.setText("");
        txtAreaConstruccion.setText("");
        txtValorTerreno.setText("");
        txtValorEdificacion.setText("");

        // Desmarcar los botones de opción
        rbtUrbano.setSelected(false);
        rbtRural.setSelected(false);

        // También puedes limpiar los JLabel si es necesario
        lblNombresRes.setText("");
        lblApellidosRes.setText("");
        lblCorreoRes.setText("");
        lblTelefonoRes.setText("");
        lblEdadRes.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Guardar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellidos;
    private javax.swing.JLabel lblApellidosRes;
    private javax.swing.JLabel lblAreaConstruccion;
    private javax.swing.JLabel lblAreatotal;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblCodCastral;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblCorreoRes;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEdad;
    private javax.swing.JLabel lblEdadRes;
    private javax.swing.JLabel lblEscudoIbarra;
    private javax.swing.JLabel lblNombres;
    private javax.swing.JLabel lblNombresRes;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTelefonoRes;
    private javax.swing.JLabel lblTipoPro;
    private javax.swing.JLabel lblValorEdificacion;
    private javax.swing.JLabel lblValorTerreno;
    private javax.swing.JPanel pnlPersona;
    private javax.swing.JPanel pnlPropiedad;
    private javax.swing.ButtonGroup rbtGrupo;
    private javax.swing.JRadioButton rbtRural;
    private javax.swing.JRadioButton rbtUrbano;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtAreaConstruccion;
    private javax.swing.JTextField txtAreaTotal;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtCodCastral;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtValorEdificacion;
    private javax.swing.JTextField txtValorTerreno;
    // End of variables declaration//GEN-END:variables
}
