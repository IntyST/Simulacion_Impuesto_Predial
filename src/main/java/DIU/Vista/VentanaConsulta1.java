/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DIU.Vista;

import DIU.Controlador.ConsultaPagosControlador;
import DIU.Controlador.PDFConsultaPagos;
import DIU.Controlador.PersonaControlador;
import DIU.Modelo.ConsultaPagosModelo;
import DIU.Modelo.DatosPredialesModelo;
import DIU.Modelo.PersonaModelo;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class VentanaConsulta1 extends javax.swing.JFrame {

    public String codCastralPred, fecha_ingreso_pago, fecha_vencimiento_pago, descripcion_pago, direccion, sub_total_pago;
    DefaultTableModel modelo = new DefaultTableModel();
    private String cedula;

    public List<PersonaModelo> personas;
    public List<ConsultaPagosModelo> consultas;
    public List<DatosPredialesModelo> predios;

    /**
     * Creates new form VentanaConsulta1
     */
    public VentanaConsulta1(String cedula) {
        initComponents();
        setModelo();
        this.cedula = cedula;
        lblCedula.setText(cedula);
        lblFecha.setText(fechaString);
        calcularTotalSubtotales();
    }

    // Obtener la fecha actual
    Date fechaActual = new Date();

    // Formatear la fecha a un String
    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
    String fechaString = formato.format(fechaActual);

    public void setModelo() {
        String[] cabecera = {"Nro.", "COD Castral", "Fecha de ingreso", "Fecha de vencimiento",
            "Comentario", "Dirección", "Subtotal"};
        modelo.setColumnIdentifiers(cabecera);
        tblConsultaPredios.setModel(modelo);
    }

    public void setDatosPago(ArrayList<Object[]> datosPago) {
        // Limpiar la tabla antes de agregar nuevos datos
        modelo.setRowCount(0);

        // Agregar los datos a la tabla
        int contador = 1; // Inicializar el contador
        for (Object[] fila : datosPago) {
            Object[] nuevaFila = new Object[7];
            nuevaFila[0] = contador;
            System.arraycopy(fila, 0, nuevaFila, 1, fila.length);
            modelo.addRow(nuevaFila);
            contador++;
        }
    }

    // Método para calcular la suma de los subtotales
    private void calcularTotalSubtotales() {
        ConsultaPagosControlador controlador = new ConsultaPagosControlador();
        ArrayList<Object[]> datosPago = controlador.consultaPago(cedula);
        double totalSubtotales = 0;

        // Verificar si se encontraron datos para la cédula
        if (datosPago != null && !datosPago.isEmpty()) {
            // Sumar los subtotales
            for (Object[] fila : datosPago) {
                totalSubtotales += Double.parseDouble(fila[5].toString());
            }
        }

        // Mostrar el total en el JLabel
        lblTotalRes.setText(String.valueOf(totalSubtotales));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblCedula = new javax.swing.JLabel();
        btnVerDatosPrediales = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblConsultaPredios = new javax.swing.JTable();
        lblFecha = new javax.swing.JLabel();
        abrirPdf = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        lblTotalRes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTitulo.setText("Consulta Predios de:");

        btnVerDatosPrediales.setText("Ver datos prediales");
        btnVerDatosPrediales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerDatosPredialesActionPerformed(evt);
            }
        });

        btnImprimir.setText("Generar PDF");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        tblConsultaPredios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblConsultaPredios);

        lblFecha.setText("Fecha");

        abrirPdf.setText("Abrir PDF");
        abrirPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirPdfActionPerformed(evt);
            }
        });

        lblTotal.setText("El total del valor de todos los predios a pagar es:  $");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(lblTitulo)
                                .addGap(18, 18, 18)
                                .addComponent(lblCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnVerDatosPrediales, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(385, 385, 385)
                                .addComponent(abrirPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)))
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1294, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTotalRes, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(85, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(btnSalir)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitulo)
                    .addComponent(lblCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVerDatosPrediales)
                    .addComponent(btnImprimir)
                    .addComponent(abrirPdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(lblTotalRes, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerDatosPredialesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerDatosPredialesActionPerformed
        ConsultaPagosControlador controlador = new ConsultaPagosControlador();
        ArrayList<Object[]> datosPrediales = controlador.verDatosPrediales(cedula);

        // Crear la nueva ventana y pasar los datos
        VentanaConsulta2 v2 = new VentanaConsulta2(cedula);
        v2.setDatos(datosPrediales);
        v2.setVisible(true);
        this.dispose();


    }//GEN-LAST:event_btnVerDatosPredialesActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        PantallaPrincipal pantallaPrin = new PantallaPrincipal();
        pantallaPrin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        ConsultaPagosControlador controlador = new ConsultaPagosControlador();
        ArrayList<Object[]> datosPago = controlador.consultaPago(cedula);

        // Verificar si se encontraron datos para la cédula
        if (datosPago != null && !datosPago.isEmpty()) {
            // Obtener los datos de la persona
            PersonaControlador personaControlador = new PersonaControlador();
            PersonaModelo persona = personaControlador.recuperarDatosPersona(cedula);

            // Verificar si se encontraron datos de la persona
            if (persona != null) {
                // Generar el PDF
                PDFConsultaPagos pdfGenerator = new PDFConsultaPagos();
                Object[][] datosPagoArray = datosPago.toArray(new Object[datosPago.size()][]);
                // Crear el mapa de datos de la persona
                Map<String, String> datosPersona = Map.of(
                        "Nombres", persona.getNombres(),
                        "Apellidos", persona.getApellidos(),
                        "Correo", persona.getCorreo(),
                        "Teléfono", persona.getTelefono(),
                        "Fecha de Nacimiento", persona.getFechaNacimiento().toString()
                );
                // Llamar al método generarPDF con los parámetros correctos
                pdfGenerator.generarPDF(cedula, datosPagoArray, datosPersona);

                // Mostrar mensaje de éxito
                JOptionPane.showMessageDialog(this, "PDF generado con éxito");
            } else {
                // Mostrar mensaje de error
                JOptionPane.showMessageDialog(this, "No se encontraron datos de la persona para la cédula ingresada", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Mostrar mensaje de error
            JOptionPane.showMessageDialog(this, "No se encontraron datos de pago para la cédula ingresada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void abrirPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirPdfActionPerformed
        try {
            // Ruta del archivo PDF generado
            String rutaPDF = "ConsultaPagos_" + cedula + ".pdf";

            // Verificar si Desktop está soportado en el entorno actual
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File archivoPDF = new File(rutaPDF);

                // Verificar si el archivo existe
                if (archivoPDF.exists()) {
                    desktop.open(archivoPDF);
                } else {
                    JOptionPane.showMessageDialog(this, "El archivo PDF no existe", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "El sistema no soporta la apertura de archivos PDF", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al abrir el archivo PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_abrirPdfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirPdf;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVerDatosPrediales;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalRes;
    private javax.swing.JTable tblConsultaPredios;
    // End of variables declaration//GEN-END:variables
}
